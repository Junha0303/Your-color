//
//  CaptureHandler.swift
//  RGB
//
//  Created by 박준하 on 2021/07/06.
//

import Foundation
import UIKit

class ImageSaver: NSObject {
    
    func writeToPhotoAlbum(image: UIImage, modelData: ModelData)
    {
        let contextRawPointer = UnsafeMutableRawPointer(Unmanaged.passUnretained(modelData).toOpaque())
        UIImageWriteToSavedPhotosAlbum(image, self, #selector(saveError), contextRawPointer)
    }
    
    @objc func saveError(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {
        
        let context: ModelData = Unmanaged<ModelData>.fromOpaque(contextInfo).takeRetainedValue()
        
        if let error = error {
            print("error: \(error.localizedDescription)")
            context.saveImageErrorMessage = String(error.localizedDescription)
            context.showFailureAlert = true
            context.objectWillChange.send()
        } else {
            context.showSuccessAlert = true
            print("Save completed!")
            context.objectWillChange.send()
        }
    }
}

private func createUIImage(red: Double, green: Double, blue: Double, opacity: Double, imgSize: CGSize) -> UIImage {
    let redString: String = "red : " + String(format: "%.2f", red * 255)
    let greenString: String = "green : " + String(format: "%.2f", green * 255)
    let blueString: String = "blue : " + String(format: "%.2f", blue * 255)
    let opacityString: String = "opacity : " + String(format: "%.2f", opacity)
    let hexString: String = "#" + convertToHex(red: red, green: green, blue: blue)
    
    let strings: [String] = [hexString, opacityString, blueString, greenString, redString]
    let textColor = ((red > 200/255) && (green > 200/255) && (blue > 200/255)) || (opacity < 0.2) ? UIColor.black : UIColor.white
    let textSize = ((imgSize.width + imgSize.height) / 2) * (8 / 300)
    let textFont = UIFont(name: "Avenir-BookOblique", size: textSize)!
    let color = UIColor(red: CGFloat(red), green: CGFloat(green), blue: CGFloat(blue), alpha: CGFloat(opacity))
    
    let now = Date()
    let date = DateFormatter()
    date.locale = Locale(identifier: "ko_kr")
    date.timeZone = TimeZone(abbreviation: "KST")
    date.dateFormat = "yyyy-MM-dd HH:mm:ss"
    let kr = "Captured at " + date.string(from: now) + " KST"
    let mark = "Generated by Your Color" + "\n\(kr)"

    UIGraphicsBeginImageContextWithOptions(imgSize, false, 1.0)
    UIGraphicsGetCurrentContext()!.setFillColor(color.cgColor)
    UIGraphicsGetCurrentContext()!.fill(CGRect(origin: .zero, size: imgSize))
    
    let textFontAttributes = [
        NSAttributedString.Key.font: textFont,
        NSAttributedString.Key.foregroundColor: textColor,
    ] as [NSAttributedString.Key : Any]
    
    var xPos: CGFloat = imgSize.width * (1 / 60)
    var yPos: CGFloat = imgSize.height * (1 / 60)
    mark.draw(in: CGRect(origin: CGPoint(x: xPos, y: yPos), size: mark.size(withAttributes: textFontAttributes)), withAttributes: textFontAttributes)
    
    xPos = imgSize.width * (59 / 60)
    yPos = imgSize.height * (59 / 60)
    for s in strings {
        let strSize = s.size(withAttributes: textFontAttributes)
        yPos -= (strSize.height * 0.8)
        let rect = CGRect(origin: CGPoint(x: xPos - strSize.width, y: yPos) , size: strSize)

        s.draw(in: rect, withAttributes: textFontAttributes)
    }

    let colorImage = UIGraphicsGetImageFromCurrentImageContext()
    UIGraphicsEndImageContext()
    
    return colorImage!
}


func saveUIImage(red: Double, green: Double, blue: Double, opacity: Double, modelData: ModelData) {
    let imgSaver = ImageSaver()
    let img = createUIImage(red: red, green: green, blue: blue, opacity: opacity, imgSize: CGSize(width: 1536, height: 1536))
    
    imgSaver.writeToPhotoAlbum(image: img, modelData: modelData)
}
